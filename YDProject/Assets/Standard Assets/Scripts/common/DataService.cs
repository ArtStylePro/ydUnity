// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Threading;
using System.Net.Sockets;
using UnityEngine;
using System.IO;
using SimpleJSON;


namespace AssemblyCSharpfirstpass
{
	public class DataService:MonoBehaviour
	{
		private static readonly string redatomsUrl = "http://mm.redatoms.com";           //  //sheng chan
		private static readonly string updateDownUrl = "http://cdn.redatoms.com/mm/xml/";
		private static readonly string hotDownUrl = "http://cdn.redatoms.com/mm/xml/HotMusic.xml";

		private Hashtable mEventCallBackList = new Hashtable();
		public  const int CHECK_VERSION = 0X10001;
		public  const int GET_USER_INFO = CHECK_VERSION + 1;
		public  const int GET_MUSIC_LIST = CHECK_VERSION + 2;
		public  const int GET_VERSION_DATA = CHECK_VERSION + 3;
		public string DEVICE_ID;

		private static DataService mService;
	
		public static  DataService instance()
		{

			return mService;
		}
		public  void checkEvent(int _event_id,Component _reciever)
		{
			lock(mEventCallBackList)
			{
				if (mEventCallBackList.ContainsKey (_event_id)) 
				{
					ArrayList objectList = mEventCallBackList[_event_id] as ArrayList;
					objectList.Add(_reciever);
				}
				else
				{
					ArrayList recieverList = new ArrayList();
					recieverList.Add(_reciever);
					mEventCallBackList.Add(_event_id,recieverList);
					processEvent(_event_id);
				}
			}
		
			   
		}
		public  void processEvent(int _event_id)
		{
			switch(_event_id )
			{
			case CHECK_VERSION:
				DS_check_version()	;
				break;
			case GET_USER_INFO:
				break;
			case GET_MUSIC_LIST:
				break;
			}
		}
		private void DS_check_version()
		{
			string url = String.Format("/taptapServ/service/music/version/1.0.10");
			HttpRequest request = new HttpRequest(this);
			request.server = redatomsUrl;
			request.url = url;
			request.isPost = false;
			request.eventID = CHECK_VERSION;
//			Thread httpThread = new Thread(new ThreadStart(request.startRequest));
//			httpThread.Start();
			StartCoroutine(request.startRequest());
//			request.startRequest();

		}
		private void DS_check_version_callback()
		{

		}
		public void onMissionFinished(int _event_id,bool _ret ,WWW _request)
		{
			if(_ret == false)
		   {
				Debug.Log ("mission " +  _event_id + " fail!!!");

			}
			else
			{
				Debug.Log ("mission " +  _event_id + " success!!!");
				lock(mEventCallBackList)
				{
					switch(_event_id)
					{
					case CHECK_VERSION:
						if(_ret)
						{
							JSONNode json = JSONArray.Parse(_request.text);

//							if(json["error"])
//							foreach(JSONNode node in json.Childs)
							{
								if(json["error"].AsInt > 0 )
								{
									Debug.Log ("server return error no:" + json["error"].AsInt);
								}
								else
								{
									Debug.Log ("server return message:" + json["data"].ToString());
									getNewVersionData(json["data"].AsInt);

								}
							}

						}
					
						break;
					case GET_VERSION_DATA:
						if(_ret)
						{
							string dir = Application.dataPath;
							File.WriteAllText(dir + "/music.xml",_request.text);
						}
						break;

					}
				}
						

			}
		}
		void Update()
		{

		}
		void Start()
		{
			DEVICE_ID = SystemInfo.deviceUniqueIdentifier;
			mService = this;
			camera.aspect = 320.0f/480.0f;
		}
		private void getNewVersionData(int _version)
		{
			string url = String.Format("{0}.xml",_version);
			HttpRequest request = new HttpRequest(this);
			request.server = updateDownUrl;
			request.url = url;
			request.isPost = false;
			request.eventID = GET_VERSION_DATA;
			//			Thread httpThread = new Thread(new ThreadStart(request.startRequest));
			//			httpThread.Start();
			StartCoroutine(request.startRequest());
		}
	}
} 