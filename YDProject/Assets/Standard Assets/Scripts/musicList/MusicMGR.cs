// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.IO;
using System.Xml;
using UnityEngine;
using System.Data;
using Mono.Data.Sqlite;
namespace AssemblyCSharpfirstpass
{
	public class MusicMGR
	{
		private IDbConnection mDBHandle;
		private IDataReader mDBReader;
		private IDbCommand mDBCommander;
		private static MusicMGR mInstanace = new MusicMGR();
		public static MusicMGR instance()
		{
			return mInstanace ;
				
		}
		private MusicMGR ()
		{
			mDBHandle = getDBConnection();
			mDBHandle.Open();
			int music_count = getMusicCount();
			if(music_count == 0)
			{
				loadInitData();
			}
		}
		public int getMusicCount()
		{
			string sql = "select count(*) from music";
			mDBCommander = mDBHandle.CreateCommand();
			mDBCommander.CommandText = sql;
			mDBReader = mDBCommander.ExecuteReader();
			mDBReader.Read();

			return mDBReader.GetInt32(0);
		}
		public string getMusicDir()
		{
			return Application.persistentDataPath + "/music";
		}
		public  IDbConnection getDBConnection()
		{
			string dbDestination =  Application.persistentDataPath + "/music.db";
			Debug.Log ("db path:" + dbDestination);
			if(File.Exists(dbDestination) == false)
			{
				TextAsset db_content = Resources.Load("db/music") as TextAsset;
				File.WriteAllBytes(dbDestination,db_content.bytes);

				
			}
			IDbConnection connection = new SqliteConnection("URI=file:" + dbDestination);
			return connection;
		}
		private void loadInitData()
		{
			//unzip interal music data
			int i = 1;
			for(i = 1;i <= 8;i ++)
			{
				int id = 120000 + i;
				string asset_path = string.Format("songs/{0}",id);
				Debug.Log("path:" + asset_path);
				TextAsset zip_asset = Resources.Load(asset_path) as TextAsset;
				string dest_path = string.Format("{0}/{1}",getMusicDir(),id);
				ZipUtils.unzipMusicZip(zip_asset.bytes,dest_path);
			}
			TextAsset music_list_xml = Resources.Load("songs/music_list") as TextAsset;
			
			MemoryStream stream = new MemoryStream (music_list_xml.bytes);
			parseXMLFile(stream,true);	

		}
		private void parseXMLFile(MemoryStream _stream,bool _asset)
		{

			XmlTextReader reader = new XmlTextReader (_stream);
			string sql = "insert into music (id,name,singer,duration,three_key,four_key,icon_url,coin,cash,level,pinyin,volume,three_key_score,four_key_score,downloaded,asset,buy) values (";
			while (reader.Read()) {
				if(reader.Name == "music")
				{
					try
					{
						string line = parseMusicItem (reader,sql,_asset);
						Debug.Log("execute sql:" + line);
						mDBCommander = mDBHandle.CreateCommand();
						mDBCommander.CommandText = line;
						mDBReader = mDBCommander.ExecuteReader();
						if(mDBReader.RecordsAffected != 1)
						{
							Debug.LogWarning("exeucte fail,noting affected");
						}
						else
							Debug.Log("success inserted");
						
					}
					catch(Exception e)
					{
						//	Debug.LogWarning(e.StackTrace);
					}
					
				}
			}
		}
		public string parseMusicItem(XmlReader _node,string _sql,bool _asset)
		{
			XmlReader _music = _node.ReadSubtree();
			int id  = 0;
			string name = "";
			string duration = "";
			string singer = "";
			string hasThreeKey = "";
			string hasFourKey = "";
			int coin = 0;
			int cash = 0;
			int volume = 0;
			int level = 0;
			string pinyin = "";
			string iconurl = "";
			
			string node_name = "";
			while(_music.Read())
			{
				switch(_music.NodeType)
				{
				case XmlNodeType.Element:
					node_name = _music.Name;
					break;
				case XmlNodeType.Text:
					switch(node_name)
					{
					case "id":
						id  = _music.ReadContentAsInt();
						Debug.Log ("parse music with id:" + id);
						break;
					case "name":
						name = _music.ReadContentAsString();
						name = name.Replace("'","\"");
						Debug.Log ("parse music name:" + name);
						break;
					case "singer":
						singer = _music.ReadContentAsString();
						singer = singer.Replace("'","\"");
						Debug.Log ("parse music singer:" + singer);
						break;
					case "time":
					{
						duration = _music.ReadContentAsString();
						//						string[] time_splited = time.Split(':');
						//						int minutes = int.Parse(time_splited[0]);
						//						int seconds = int.Parse(time_splited[1]);
						//						duration = minutes * 60 + seconds;
						Debug.Log ("parse music duraiton:" + duration);
						
						break;
					}
					case "coin":
					{
						coin = _music.ReadContentAsInt();
						Debug.Log("parse music coin:" + coin);
						break;
					}
					case "cash":
					{
						cash = _music.ReadContentAsInt();
						Debug.Log ("parse music cash:" + cash);
						break;
					}
					case "lv":
					{
						level = _music.ReadContentAsInt();
						Debug.Log("parse music level:" + level);
						break;
					}
					case "key3":
					{
						hasThreeKey = _music.ReadContentAsString();
						
						break;
					}
					case "key4":
					{
						hasFourKey = _music.ReadContentAsString();
						break;
					}
					case "pinyin":
					{
						pinyin = _music.ReadContentAsString();
						break;
					}
					case "iconurl":
					{
						iconurl = (_music.ReadContentAsString());
						break;
					}
					case "volume":
					{
						volume = (_music.ReadContentAsInt());
						break;
					}
					}
					break;
				default:
					break;
				}
			}
			string line = _sql;
			line += string.Format("{0:D}",id) + ",";//				0|id||0||0;
			line += "'" + name + "',";//	1|name||0||0;
			line += "'" + singer + "',";//				2|singer||0||0;
			line += "'" + duration + "',";//				3|duration||0||0;
			line +=  "'" + hasThreeKey +"',";//				4|three_key||0||0
			line += "'" + hasFourKey + "',";//				5|four_key||0||0
			line += "'" + iconurl + "',";//				6|icon_url||0||0
			line += string.Format("{0:D}",coin) + ",";//				7|coin||0||0
			line += string.Format("{0:D}",cash) + ",";//				8|cash||0||0
			line += string.Format("{0:D}",level) + ",";//				9|level||0||0
			line += "'" + pinyin + "',";//				10|pinyin||0||0
			line += string.Format("{0:D}",volume) + ",";//				11|volume||0||0
			line += "'',";//				12|three_key_score||0||0
			line += "'',";//				13|four_key_score||0||0
			if(_asset)
			{
				line += "'1',";//			14|downloaded||0||0
				line += "'1',";//				15|asset||0||0;
				line += "'1'";//				16|buy||0||0;

			}
			else{
				line += "'0',";//			14|downloaded||0||0
				line += "'0',";//				15|asset||0||0;
				line += "'0'";//				16|buy||0||0;
			}

			line += ")";
			
			return line;
			
		}
		public MusicInfo getMusic(int _id)
		{
			string sql = "select * from music where id=" + _id;
			mDBCommander = mDBHandle.CreateCommand();
			mDBCommander.CommandText = sql;
			mDBReader = mDBCommander.ExecuteReader();
			if(mDBReader == null)
				return null;
			mDBReader.Read();
			MusicInfo music_info = new MusicInfo();
			music_info.parseMusicItem(mDBReader);
			mDBReader.Close();
			return music_info;
		}
		public bool updateMusicScore(int _id,MusicScore _score,bool _is_three_key)
		{
			string score_string = _score.encode();
			string sql = string.Format("update music set {0}='{1}' where id={2}",_is_three_key?"three_key_score":"four_key_score",score_string,_id);
			Debug.Log("execute sql:" + sql);
			mDBCommander = mDBHandle.CreateCommand();
			mDBCommander.CommandText = sql;
			mDBReader = mDBCommander.ExecuteReader();
			if(mDBReader.RecordsAffected ==1 )
			{
				return true;
			}
			return false;

		}
 	}
}

