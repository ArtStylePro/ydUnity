// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.IO;

namespace AssemblyCSharpfirstpass
{
	public class MusicDownloader:MonoBehaviour
	{
		public UILabel mSongName;
		public UILabel mSingerName;
		public UITexture mSongThumb;
		public UISprite mSongLeve;
		public UILabel mCoin;
		public UISlider mDownloadingProgress;
		private  MusicInfo mMusicInfo;
		public static MusicDownloader script;
		private WWW mDownloadRequest;
		private static readonly string updateDownUrl = "http://cdn.redatoms.com/mm/music/";
		private int mStatus;
		void Start()
		{
		
			MusicDownloader.script = this;
			mStatus = 0;
			//Debug.Log ("bg:" + bg_id + "  df:" + df_id + " dl:" + dl_id);
//			Camera.main.eventMask = LayerMask.NameToLayer("Dialog");
		}
		void Update()
		{
			switch(mStatus)
			{
			case 0://do nothing
				break;
			case 1:
				if(mDownloadRequest != null)
				{
					Debug.Log("download progress:" + mDownloadRequest.progress);
					mDownloadingProgress.sliderValue = mDownloadRequest.progress;
				}
				break;
			default:
				break;
			}

		}
		public void loadMusicInfo(MusicInfo _info)
		{
			mMusicInfo = _info;
			mSongName.text = _info.mSongName;
			mSingerName.text = _info.mSingerName;
		}
	
		public IEnumerator OnDownloadStart()
		{
			SortedList paramJList = new SortedList();
			string url = string.Format("{0}{1}.zip",updateDownUrl,mMusicInfo.mID);
			string signature =  URLEncryption.encryptURL(url,paramJList);
			Hashtable headers = new Hashtable();
			headers.Add("X-TAPTAP-SIGNATURE",signature);
			mDownloadRequest  = new WWW(url,null,headers);
			mStatus = 1;
			yield return mDownloadRequest;

			mStatus = 0;
			string destPath = string.Format("{0}/music/{1:D}/",Application.persistentDataPath,mMusicInfo.mID);
			if(Directory.Exists(destPath) == false)
			{
				Directory.CreateDirectory(destPath);
			}
			Debug.Log("download is over");
			ZipUtils.unzipMusicZip(mDownloadRequest.bytes,destPath);
//			GameMainController.mMusicID = mMusicInfo.mID;
			MusicListLogic.script.OnMusicDownloaded(mMusicInfo);
//			Application.LoadLevel("Main");

//			File.WriteAllBytes(destPath,mDownloadRequest.bytes);

			//			Thread httpThread = new Thread(new ThreadStart(request.startRequest));
			//			httpThread.Start();
		//	StartCoroutine(request.startRequest());

		}
	
	}

}

